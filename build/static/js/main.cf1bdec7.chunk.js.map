{"version":3,"sources":["Product.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Product","addItemToCart","_this","props","clickHandler","params","react_default","a","createElement","className","src","this","image","alt","name","price","onClick","Component","Header","showItemsInCart","list","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","items","Symbol","iterator","next","done","item","value","push","err","return","class","data-toggle","data-target","length","id","tabindex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","React","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","products","file","setState","selectedProduct","prevState","newItemList","shoppingCartItems","console","log","state","createProductsTable","table","currentProduct","src_Product_0","src_Header_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf1bdec7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Product.css\";\n\nclass Product extends Component {\n\n  addItemToCart = () => {\n    this.props.clickHandler(this.props.params);\n  }\n\n  render() {\n    return (\n      <div className=\"product\">\n        <div className=\"product-left\">\n          <img src={this.props.params.image} className=\"product-img\"\n            alt=\"\" />\n        </div>\n\n        <div className=\"product-right\">\n          <p>{this.props.params.name}</p>\n          <p>{this.props.params.price}</p>\n          <button onClick={this.addItemToCart}>Add to cart</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Product;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport './Header.css';\n\nclass Header extends React.Component {\n\n  showItemsInCart = () => {\n    const list = [];\n    for(let item of this.props.items) {\n      list.push(<li>{item.name} {item.price}</li>);\n    }\n    return list;\n  }\n\n  render() {\n    return (\n      <div>\n        {\n          // Main Header code\n        }\n        <div className=\"Header-container\">\n          <div className=\"Header-left\">\n            <span className=\"Header-title\">E-scooter Emporium</span>\n            <img src=\"/assets/logo.png\" className=\"Header-logo\" alt=\"logo\" />\n          </div>\n\n          <div className=\"Header-right\">\n            <button class=\"modal-button\" data-toggle=\"modal\"\n              data-target=\"#exampleModal\"\n              >\n              <span className=\"Header-cartItemCounter\">{this.props.items.length}\n              </span>\n              <i className=\"material-icons\">shopping_cart</i>\n            </button>\n          </div>\n        </div>\n\n        {\n          // Modal code\n        }\n        <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\"\n          aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"\n          >\n          <div class=\"modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n                  Items in shopping cart\n                </h5>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                  >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n              <div class=\"modal-body\">\n                <ul type=\"none\" class=\"modal-list\">\n                  {this.showItemsInCart()}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Product from \"./Product\";\nimport Header from \"./Header\";\nimport \"./App.css\";\n\nimport file from \"./products.json\";\n\nclass App extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n      items: [],\n      shoppingCartItems: []\n\t\t};\n\t}\n\n  componentDidMount = () => {\n    const { products } = file;\n    this.setState({items: products});\n  }\n\n  addItemToCart = (selectedProduct) => {\n    this.setState( (prevState) => {\n      const newItemList = prevState.shoppingCartItems;\n      newItemList.push(selectedProduct);\n      return {items: prevState.items, shoppingCartItems: newItemList};\n    });\n    console.log(this.state);\n  }\n\n  createProductsTable = () => {\n    const table = [];\n    for (let item of this.state.items) {\n      const currentProduct = <Product params={item}\n        clickHandler={this.addItemToCart}/>;\n      table.push(currentProduct);\n    }\n    return table;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header items={this.state.shoppingCartItems}/>\n        <div className=\"App-main\">\n          {this.createProductsTable()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}